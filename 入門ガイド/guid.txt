#
# 注意 guid.txt → filedetails.txt → supabase.txt の順番で見てください。
#


環境セットアップ＆デプロイガイド

このガイドは、Node.js、Git Bash、VSCode のインストールから、GitHub でのコード取得、Supabase を用いたデータベース設定、ローカルサーバーの起動、Vercel へのデプロイまでの一連の流れを説明しています。

#
# インストールと周辺セットアップ
#

必要なツールのインストール
【Node.js のインストール】 URL: https://nodejs.org/ 公式サイトから最新版の Node.js をダウンロードしてインストールしてください。

【Git Bash のインストール】 URL: https://gitforwindows.org/ Git Bash をインストールすると、Windows でも Unix ライクなシェルが利用可能になります。

【VSCode のインストール】 URL: https://code.visualstudio.com/Download お使いの環境に合わせた VSCode をインストールしてください。

インストール後の基本確認

コマンドプロンプトで確認
・「Win + R」で「cmd」と入力してコマンドプロンプトを開く。
・以下のコマンドを実行してバージョンを確認：
node -v
npm -v
・エラーが出る場合は、Node.js のインストールを再確認する。

VSCode のターミナル設定
・VSCode を起動し、Ctrl + Shift + P でコマンドパレットを開く。
・「Terminal: Select Default Profile」と入力し、表示されるリストから「Git Bash」を選択する。

VScodeの必要パッケージのインストール
・サイドバーの「Extensions」アイコンをクリック。
[Jupyter],[Next JS/TS Snippets],[tsx],[Git History],[HTML CSS Support]をそれぞれ検索してinstall
Jupyterに関しては拡張機能パックが複数あるのですべてinstall

VSCode の日本語化
・サイドバーの「Extensions」アイコンをクリック。
・検索欄に「Japanese Language Pack for Visual Studio Code」と入力し、拡張機能をインストールする。
・右下に表示される「Change Language and Restart」をクリックして VSCode を再起動する。

GitHub からのコード取得

VSCode でリポジトリをクローン
・VSCode を起動し、Ctrl + Shift + P で「Git: Clone」を選択。
・共同開発用の GitHub リポジトリの URL（リポジトリ→Code の HTTPS リンク）を入力し、ローカル保存先を指定してクローンする。
この時に共同開発のアカウントと紐づける画面が出た場合は紐づけてください。

githubの「アカウントページ」からsettingに飛びます。
その項目のEmailを選択します。そこにあるEmailを使用します。
そしてアカウントの名前も使用します。ターミナルに以下を参考にして入力します。※あらかじめ紐づけられている場合はしなくてもいいです。
git config --global user.email "メールアドレス"
git config --global user.name "ユーザー名"
これでvscodeとgithubとの連携が完了しました。

※注意：過去にvscodeを使用して別のgithubアカウントと連携している場合はpcにキャッシュが残っているためそれを消す必要があります。（基本的には初めてだと思うのでこれは必要ないと思います。）

#
# プロジェクト初期設定
#

【1-1. 足りないファイルの作成】
・プロジェクトのトップディレクトリに「.env.local」という名前のファイルを作成（ドットを忘れずに）。
・このファイルは後で環境変数の設定に使用するので、初めは空でOK。

【1-2. 依存関係のインストール】
・VSCode のターミナル（Git Bash が既定になっていることを確認）を開き、以下のコマンドを実行：
npm install
・エラーが発生する場合は、前のセットアップ（Node.js や VSCode の設定）を再確認する。

#
# データベースの設定（Supabase）
#

【2-1. Supabase アカウント作成とプロジェクト設定】
・URL: https://supabase.com/
・Supabase にアクセスし、アカウントを作成。（GitHub アカウント連携推奨）
・プロジェクト作成時は、サーバーリージョンとして「Tokyo」を選択。

【2-2. .env.local への設定情報の記入】
・.env.local に以下の項目を記載：
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
NEXT_PUBLIC_COOKIE=
・Supabase プロジェクトの「Project Settings → Data API」から取得した情報を入力する。
　- Project URL → NEXT_PUBLIC_SUPABASE_URL
　- Project API Keys（anon/public のキー） → NEXT_PUBLIC_SUPABASE_ANON_KEY
・NEXT_PUBLIC_COOKIE の例：
URLが[https://YOURID.supabase.co]のようになっていると思うのでそのYOURID部分を取得する。そして以下のように設定する
NEXT_PUBLIC_COOKIE=sb-YOURID-auth-token
※「＝」の前後に余分な空白が入らないよう注意する。

【2-3. SQL エディタでテーブル＆RLS 設定】
・Supabase プロジェクト画面のサイドバーから「SQL Editor」を開く。
・VSCode 内の 入門ガイド/sqleditor フォルダにある各 SQL スニペットのコードをコピーし、SQL Editor に貼り付ける。
・貼り付けたら右下の「Run」ボタンをクリックし、エラーが出ないか確認する。

【2-4. 型定義の生成】
・ターミナルで以下を実行：
npx supabase login
・ログイン後、以下のコマンドで TypeScript 用の型定義を生成：(YOURIDを使用する)
npx supabase gen types typescript --project-id YOURID --schema public > types/database.ts
※ API キー等の情報が公開されないよう、取り扱いに注意する。

#
# サイトの起動
#

・VSCode のターミナル（Git Bash）で以下のコマンドを実行：
npm run dev
・正常に起動すれば、ブラウザでサイトを確認可能。（Ctrlを押しながらリンクをクリックすると簡単にターミナルからサイトに飛べる）

#
# Vercel への「初回」デプロイ ※2回目以降はもっと簡単になります。
#

【3-1. Vercel アカウント作成とプロジェクトのインポート】
・URL: https://vercel.com/
・GitHub アカウントで登録後、「Add New Project」をクリックし、対象リポジトリを選択してインポートする。

【3-2. 環境変数の設定】
・Vercel のプロジェクト設定内の「Environment Variables」に、.env.local の内容を登録する。
　例：
　Key: NEXT_PUBLIC_SUPABASE_URL → Value: Supabase の Project URL
　Key: NEXT_PUBLIC_SUPABASE_ANON_KEY → Value: API キー
　Key: NEXT_PUBLIC_COOKIE → Value: Cookie 設定

【3-3. デプロイの実行】
・設定完了後、「Deploy」をクリックする。
・初回は 40～70 秒程度かかる。エラーが発生した場合はエラーメッセージを確認し、公式ドキュメントや Web 検索で対応する。

#
# 2回目以降に関するデプロイ
#

【4-1. vscodeでcommitとpush】
まずファイルを編集したらvscodeのサイドバーから「ソースの管理」に行きます。
そこからコミットする名前を入れてコミットを押す。その後変更の同期を行う(※1)(※2)
注意 : コミットを押しただけではgithubに送信されません。変更の同期をして初めて変更が加わります。
※1 : 初回のpushの時には何かの認証が必要になる場合があります。
※2 : 「権限がない」と言われた場合はメールアドレスかアカウント名が一致してない可能性が高いです。インストールと周辺セットアップのgithubとvscodeの連携部分のアカウント名とメールアドレス設定を見直してください。

【4-1. vercelに行く】
デプロイするプロジェクトのデプロイの部分を見ると自動でデプロイが開始していると思います。
それを見届けてエラーが出たら修正を加えます。エラーが出なければデプロイ完了です。
つまりgithubに変更があると自動的にデプロイしてくれます。
※手動でgithubのコミットリンクを持ってきてデプロイすることもできます。（滅多にしないと思うけど）

#
# 共同開発するときの注意事項
#

【5-1. お互いの変更の同期の説明】
AさんとBさんがいます。
Aさんがpushしてgithubに変更を加えた場合はどうすればいいでしょうか？Bさんのvscodeはまだ更新されていないのでそこで問題が生じてしまいます。
そこでBさんはpullという行為をします。
pullとはgithubに外部から変更が加わった場合にそれをvscodeに持ってくるという行為です。

【5-2. pullのやり方】
変更の横に･･･があります。
それをクリックしてその項目にpullがあります。
それを実行します。
これでファイルが同期されます。

【5-3. 注意点】
共同開発している場合は何かファイルに変更を加えた場合に互いに連絡を取ることをお勧めします。
また定期的にファイルのバックアップを取っておくのも一つの手段です。
あと外部から変更が加わった場合は絶対にpullをして下さい。

#
# その後の作業
#

【ファイル構造と仕組みの把握】
・プロジェクトの大まかな構造や動作の仕組みについて確認する。
これに関してはfiledetails.txtを見てください。

【データベースへの情報入力】
・status テーブルなど、サイトで使用するデータは注意深く入力・更新する。
　※status テーブルの name カラムは、サイト側の title と一致させる必要がある。
これは手動でinsertする必要があるので注意してください。※来年のことも考えて自動化するかも（このコメントがある場合は自動化してない）

これで環境セットアップおよびデプロイ周辺は終了です。

# 次にfiledetails.txtを読んでください。